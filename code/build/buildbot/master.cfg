# -*- python -*-

# This is orx's buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory. More info in install.txt.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}

# This is the name of the hg command.
# NB: The full path to the executable is needed on windows.
# Ex: hg = 'c:\\Program Files\\TortoiseHg\\hg.exe'

hg = 'hg'


# Misc definitions

def engine_is_important(change):
  allowed_names = ['code/src', 'code/include', 'code/plugins', '.extern']
  for name in change.files:
    for allowed in allowed_names:
      if name.startswith(allowed):
        return True
  return False

def code_is_important(change):
  for name in change.files:
    if name.startswith('tutorial/src'):
      # Tutorials
      return True
    elif name.startswith('tools') and name.endswith('.c'):
      # Tools
      return True
  # Engine
  return engine_is_important(change)


slave_list = [
  {'owner': 'iarwain',   'os': 'win',    'password': 'alexandre',  'builders': ['vs2015-32', 'vs2015-64', 'vs2017-32', 'vs2017-64', 'vs2019-32', 'vs2019-64', 'mingw-32', 'mingw-64', 'doxygen', 'src', 'android', 'android-native', 'nightly']},
  {'owner': 'iarwain',   'os': 'mac',    'password': 'charles',    'builders': ['mac', 'ios', 'nightly']},
#  {'owner': 'lydesik',   'os': 'linux',  'password': 'david',      'builders': ['android', 'android-native', 'nightly']},
#  {'owner': 'karim',     'os': 'linux',  'password': 'cesar',      'builders': ['linux32', 'linux64', 'nightly']},
#  {'owner': 'karim',     'os': 'mac',    'password': 'argine',     'builders': ['mac', 'nightly']},
  {'owner': 'sausage',   'os': 'linux',  'password': 'judith',     'builders': ['linux32', 'nightly']},
  {'owner': 'jim',       'os': 'mac',    'password': 'pallas',     'builders': ['mac', 'ios', 'nightly']},
  {'owner': 'iarwain',   'os': 'linux',  'password': 'rachel',     'builders': ['linux64', 'linux32', 'nightly']},
#  {'owner': 'lydesik',   'os': 'mac',    'password': 'lancelot',   'builders': ['mac', 'ios']},
]


platform_list = [
  {'name': 'vs2015-32',       'compile': True,  'fii': code_is_important},
  {'name': 'vs2015-64',       'compile': True,  'fii': code_is_important},
  {'name': 'vs2017-32',       'compile': True,  'fii': code_is_important},
  {'name': 'vs2017-64',       'compile': True,  'fii': code_is_important},
  {'name': 'vs2019-32',       'compile': True,  'fii': code_is_important},
  {'name': 'vs2019-64',       'compile': True,  'fii': code_is_important},
  {'name': 'mingw-32',        'compile': True,  'fii': code_is_important},
  {'name': 'mingw-64',        'compile': True,  'fii': code_is_important},
  {'name': 'mac',             'compile': True,  'fii': code_is_important},
  {'name': 'linux32',         'compile': True,  'fii': code_is_important},
  {'name': 'linux64',         'compile': True,  'fii': code_is_important},
  {'name': 'ios',             'compile': True,  'fii': engine_is_important},
  {'name': 'android',         'compile': True,  'fii': engine_is_important},
  {'name': 'android-native',  'compile': True,  'fii': engine_is_important},
  {'name': 'doxygen',         'compile': True,  'fii': engine_is_important},
  {'name': 'src',             'compile': False, 'fii': None}
]


factory_list = dict()


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('orx-' + slave['os'] + '-slave-' + slave['owner'], slave['password']) for slave in slave_list]


# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option).

c['slavePortnum'] = 9989


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.hgpoller import HgPoller
c['change_source'] = HgPoller(repourl  = 'http://hg.code.sf.net/p/orx/orx/',
                              branch   = 'default',
                              workdir  = 'orx',
                              hgbin    = hg)


####### REVLINKS

from buildbot import revlinks
c['revlink'] = revlinks.RevlinkMatch([r'http://hg.code.sf.net/p/orx/orx/(.*)',
                                      r'(.*)'],
                                      r'http://hg.code.sf.net/p/orx/orx/rev/%s/\1')


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler, StringParameter, FixedParameter, ChoiceStringParameter
from buildbot.changes import filter
c['schedulers'] = []

# Force scheduler

c['schedulers'].append(ForceScheduler(name                      = 'package',
                                      builderNames              = [platform['name'] for platform in platform_list],
                                      repository                = FixedParameter(name = "repository", default = ""),
                                      project                   = FixedParameter(name = "project", default = ""),
                                      properties                = [ChoiceStringParameter(name="version", label = "Version:<br>", default = "", choices=["", "nightly", "rc0", "rc1", "rc2", "rc3", "stable", "test"], size = 80, required = False)]))


# Nightly scheduler

c['schedulers'].append(Nightly(name                             = 'nightly',
                               builderNames                     = [platform['name'] for platform in platform_list],
                               branch                           = 'default',
                               hour                             = 20,
                               minute                           = 0,
                               properties                       = {'nightly' : True}))

c['schedulers'].append(Nightly(name                             = 'nightly-upload',
                               builderNames                     = ['nightly'],
                               branch                           = 'default',
                               hour                             = 1,
                               minute                           = 0))


# Any Branch schedulers

for platform in platform_list:
  if platform['compile']:
    c['schedulers'].append(AnyBranchScheduler(name              = 'auto-' + platform['name'],
                                              builderNames      = [platform['name']],
                                              fileIsImportant   = platform['fii'],
                                              treeStableTimer   = 120))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them. Note that any particular build will
# only take place on one slave.

import os.path

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.status.results import SUCCESS
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.master import SetProperty
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.steps.vstudio import VCExpress9
from buildbot.steps.vstudio import MsBuild4
from buildbot.steps.vstudio import MsBuild12
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.locks import SlaveLock
from buildbot.process.properties import Interpolate

class MsBuild14(MsBuild4):
    vcenv_bat = "${VS140COMNTOOLS}..\\..\\VC\\vcvarsall.bat"

class MsBuild15(MsBuild4):
    vcenv_bat = "${VS150COMNTOOLS}..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat"

class MsBuild16(MsBuild4):
    vcenv_bat = "${VS160COMNTOOLS}..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat"

# Locks

slave_lock = SlaveLock('slave_lock', maxCount = 1)

# Misc variables

src_premake_list = [
  {'os': 'windows', 'action': 'vs2015'},
  {'os': 'windows', 'action': 'vs2017'},
  {'os': 'windows', 'action': 'vs2019'},
  {'os': 'windows', 'action': 'codeblocks'},
  {'os': 'windows', 'action': 'codelite'},
  {'os': 'windows', 'action': 'gmake'},
  {'os': 'linux',   'action': 'codeblocks'},
  {'os': 'linux',   'action': 'codelite'},
  {'os': 'linux',   'action': 'gmake'},
  {'os': 'macosx',  'action': 'codeblocks'},
  {'os': 'macosx',  'action': 'codelite'},
  {'os': 'macosx',  'action': 'gmake'}
]

tool_list = [
  'orxCrypt',
  'orxFontGen'
]


# VS2015-32

factory_list['vs2015-32']                                           = BuildFactory()
factory_list['vs2015-32'].workdir                                   = '.'

factory_list['vs2015-32'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2015-32'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2015-32'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2015-32'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2015-32'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2015-32'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2015-32'].addStep(MsBuild14(projectfile             = 'tutorial/build/windows/vs2015/Tutorial.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2015-32'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2015-32'].addStep(MsBuild14(projectfile           = 'tools/' + tool + '/build/windows/vs2015/' + tool + '.sln',
                                              platform              = 'Win32',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2015-32'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2015-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2015-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2015-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2015-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2015-32'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# VS2015-64

factory_list['vs2015-64']                                           = BuildFactory()
factory_list['vs2015-64'].workdir                                   = '.'

factory_list['vs2015-64'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2015-64'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2015-64'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2015-64'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2015-64'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2015-64'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2015-64'].addStep(MsBuild14(projectfile             = 'tutorial/build/windows/vs2015/Tutorial.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2015-64'].addStep(MsBuild14(projectfile             = 'code/build/windows/vs2015/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2015-64'].addStep(MsBuild14(projectfile           = 'tools/' + tool + '/build/windows/vs2015/' + tool + '.sln',
                                              platform              = 'x64',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2015-64'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2015-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2015-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2015-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2015-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2015-64'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# VS2017-32

factory_list['vs2017-32']                                           = BuildFactory()
factory_list['vs2017-32'].workdir                                   = '.'

factory_list['vs2017-32'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2017-32'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2017-32'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2017-32'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2017-32'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2017-32'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2017-32'].addStep(MsBuild15(projectfile             = 'tutorial/build/windows/vs2017/Tutorial.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2017-32'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2017-32'].addStep(MsBuild15(projectfile           = 'tools/' + tool + '/build/windows/vs2017/' + tool + '.sln',
                                              platform              = 'Win32',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2017-32'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2017-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2017-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2017-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2017-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2017-32'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# VS2017-64

factory_list['vs2017-64']                                           = BuildFactory()
factory_list['vs2017-64'].workdir                                   = '.'

factory_list['vs2017-64'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2017-64'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2017-64'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2017-64'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2017-64'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2017-64'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2017-64'].addStep(MsBuild15(projectfile             = 'tutorial/build/windows/vs2017/Tutorial.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2017-64'].addStep(MsBuild15(projectfile             = 'code/build/windows/vs2017/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2017-64'].addStep(MsBuild15(projectfile           = 'tools/' + tool + '/build/windows/vs2017/' + tool + '.sln',
                                              platform              = 'x64',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2017-64'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2017-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2017-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2017-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2017-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2017-64'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# VS2019-32

factory_list['vs2019-32']                                           = BuildFactory()
factory_list['vs2019-32'].workdir                                   = '.'

factory_list['vs2019-32'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2019-32'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2019-32'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2019-32'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2019-32'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2019-32'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2019-32'].addStep(MsBuild16(projectfile             = 'tutorial/build/windows/vs2019/Tutorial.sln',
                                            platform                = 'Win32',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2019-32'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'Win32',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2019-32'].addStep(MsBuild16(projectfile           = 'tools/' + tool + '/build/windows/vs2019/' + tool + '.sln',
                                              platform              = 'Win32',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2019-32'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2019-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2019-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2019-32'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2019-32', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2019-32'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# VS2019-64

factory_list['vs2019-64']                                           = BuildFactory()
factory_list['vs2019-64'].workdir                                   = '.'

factory_list['vs2019-64'].addStep(Mercurial(repourl                 = 'http://hg.code.sf.net/p/orx/orx',
                                            branchType              = 'inrepo',
                                            mode                    = 'full',
                                            method                  = 'fresh',
                                            clobberOnBranchChange   = False,
                                            timeout                 = 7200))

factory_list['vs2019-64'].addStep(SetProperty(property              = 'version',
                                              value                 = 'nightly',
                                              flunkOnFailure        = False,
                                              doStepIf              = lambda step: step.build.getProperty('nightly'),
                                              hideStepIf            = True))

factory_list['vs2019-64'].addStep(ShellCommand(command              = ['setup', '../cache'],
                                               workdir              = '.',
                                               haltOnFailure        = True,
                                               name                 = 'setup',
                                               description          = 'running setup',
                                               descriptionDone      = 'setup'))

factory_list['vs2019-64'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Debug',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine debug',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine debug',
                                            descriptionDone         = 'engine debug'))

factory_list['vs2019-64'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Profile',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine profile',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine profile',
                                            descriptionDone         = 'engine profile'))

factory_list['vs2019-64'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile engine release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling engine release',
                                            descriptionDone         = 'engine release'))

factory_list['vs2019-64'].addStep(MsBuild16(projectfile             = 'tutorial/build/windows/vs2019/Tutorial.sln',
                                            platform                = 'x64',
                                            config                  = 'Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile tutorial release',
                                            description             = 'compiling tutorial release',
                                            descriptionDone         = 'tutorial release'))

factory_list['vs2019-64'].addStep(MsBuild16(projectfile             = 'code/build/windows/vs2019/orx.sln',
                                            platform                = 'x64',
                                            config                  = 'Core Release',
                                            mode                    = 'rebuild',
                                            name                    = 'compile core release',
                                            env                     = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                            description             = 'compiling core release',
                                            descriptionDone         = 'core release'))

for tool in tool_list:
  factory_list['vs2019-64'].addStep(MsBuild16(projectfile           = 'tools/' + tool + '/build/windows/vs2019/' + tool + '.sln',
                                              platform              = 'x64',
                                              config                = 'Release',
                                              mode                  = 'rebuild',
                                              name                  = 'compile ' + tool + ' release',
                                              description           = 'compiling ' + tool + ' release',
                                              descriptionDone       = tool + ' release'))

factory_list['vs2019-64'].addStep(SetPropertyFromCommand(command    = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                         property   = 'date',
                                                         flunkOnFailure= False,
                                                         doStepIf   = lambda step: step.build.getProperty('version') == 'nightly',
                                                         hideStepIf = True))

factory_list['vs2019-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'vs2019-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build dev package',
                                               description          = 'building dev package',
                                               descriptionDone      = 'dev package'))

factory_list['vs2019-64'].addStep(ShellCommand(command              = ['python', 'package.py', '-p', 'tutovs2019-64', '-d', Interpolate('%(prop:date:-)s')],
                                               workdir              = 'code/build/python',
                                               haltOnFailure        = True,
                                               doStepIf             = lambda step: step.build.getProperty('version'),
                                               name                 = 'build tutorial package',
                                               description          = 'building tutorial package',
                                               descriptionDone      = 'tutorial package'))

factory_list['vs2019-64'].addStep(DirectoryUpload(slavesrc          = 'code/build/python/packages',
                                                  masterdest        = './public_html/packages',
                                                  url               = 'http://buildbot.orx-project.org:8010/packages',
                                                  doStepIf          = lambda step: step.build.getProperty('version')))


# MinGW-32

factory_list['mingw-32']                                            = BuildFactory()
factory_list['mingw-32'].workdir                                    = '.'

factory_list['mingw-32'].addStep(Mercurial(repourl                  = 'http://hg.code.sf.net/p/orx/orx',
                                        branchType                  = 'inrepo',
                                        mode                        = 'full',
                                        method                      = 'fresh',
                                        clobberOnBranchChange       = False,
                                        timeout                     = 7200))

factory_list['mingw-32'].addStep(SetProperty(property               = 'version',
                                          value                     = 'nightly',
                                          flunkOnFailure            = False,
                                          doStepIf                  = lambda step: step.build.getProperty('nightly'),
                                          hideStepIf                = True))

factory_list['mingw-32'].addStep(ShellCommand(command               = ['setup', '../cache'],
                                           workdir                  = '.',
                                           haltOnFailure            = True,
                                           name                     = 'setup',
                                           description              = 'running setup',
                                           descriptionDone          = 'setup'))

factory_list['mingw-32'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=debug32'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine debug',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine debug',
                                      descriptionDone               = 'engine debug'))

factory_list['mingw-32'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=profile32'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine profile',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine profile',
                                      descriptionDone               = 'engine profile'))

factory_list['mingw-32'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=release32'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine release',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine release',
                                      descriptionDone               = 'engine release'))

factory_list['mingw-32'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=release32'],
                                      workdir                       = 'tutorial/build/windows/gmake',
                                      name                          = 'compile tutorial release',
                                      description                   = 'compiling tutorial release',
                                      descriptionDone               = 'tutorial release'))

factory_list['mingw-32'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=core_release32'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile core release',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling core release',
                                      descriptionDone               = 'core release'))

for tool in tool_list:
  factory_list['mingw-32'].addStep(Compile(command                  = ['mingw32-make', '-j', 'config=release32'],
                                        workdir                     = 'tools/' + tool + '/build/windows/gmake',
                                        name                        = 'compile ' + tool + ' release',
                                        description                 = 'compiling ' + tool + ' release',
                                        descriptionDone             = tool + ' release'))

factory_list['mingw-32'].addStep(SetPropertyFromCommand(command     = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                     property       = 'date',
                                                     flunkOnFailure = False,
                                                     doStepIf       = lambda step: step.build.getProperty('version') == 'nightly',
                                                     hideStepIf     = True))

factory_list['mingw-32'].addStep(ShellCommand(command               = ['python', 'package.py', '-p', 'mingw-32', '-d', Interpolate('%(prop:date:-)s')],
                                           workdir                  = 'code/build/python',
                                           haltOnFailure            = True,
                                           doStepIf                 = lambda step: step.build.getProperty('version'),
                                           name                     = 'build dev package',
                                           description              = 'building dev package',
                                           descriptionDone          = 'dev package'))

factory_list['mingw-32'].addStep(ShellCommand(command               = ['python', 'package.py', '-p', 'tutomingw-32', '-d', Interpolate('%(prop:date:-)s')],
                                           workdir                  = 'code/build/python',
                                           haltOnFailure            = True,
                                           doStepIf                 = lambda step: step.build.getProperty('version'),
                                           name                     = 'build tutorial package',
                                           description              = 'building tutorial package',
                                           descriptionDone          = 'tutorial package'))

factory_list['mingw-32'].addStep(DirectoryUpload(slavesrc           = 'code/build/python/packages',
                                              masterdest            = './public_html/packages',
                                              url                   = 'http://buildbot.orx-project.org:8010/packages',
                                              doStepIf              = lambda step: step.build.getProperty('version')))


# MinGW-64

factory_list['mingw-64']                                            = BuildFactory()
factory_list['mingw-64'].workdir                                    = '.'

factory_list['mingw-64'].addStep(Mercurial(repourl                  = 'http://hg.code.sf.net/p/orx/orx',
                                        branchType                  = 'inrepo',
                                        mode                        = 'full',
                                        method                      = 'fresh',
                                        clobberOnBranchChange       = False,
                                        timeout                     = 7200))

factory_list['mingw-64'].addStep(SetProperty(property               = 'version',
                                          value                     = 'nightly',
                                          flunkOnFailure            = False,
                                          doStepIf                  = lambda step: step.build.getProperty('nightly'),
                                          hideStepIf                = True))

factory_list['mingw-64'].addStep(ShellCommand(command               = ['setup', '../cache'],
                                           workdir                  = '.',
                                           haltOnFailure            = True,
                                           name                     = 'setup',
                                           description              = 'running setup',
                                           descriptionDone          = 'setup'))

factory_list['mingw-64'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=debug64'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine debug',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine debug',
                                      descriptionDone               = 'engine debug'))

factory_list['mingw-64'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=profile64'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine profile',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine profile',
                                      descriptionDone               = 'engine profile'))

factory_list['mingw-64'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=release64'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile engine release',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling engine release',
                                      descriptionDone               = 'engine release'))

factory_list['mingw-64'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=release64'],
                                      workdir                       = 'tutorial/build/windows/gmake',
                                      name                          = 'compile tutorial release',
                                      description                   = 'compiling tutorial release',
                                      descriptionDone               = 'tutorial release'))

factory_list['mingw-64'].addStep(Compile(command                    = ['mingw32-make', '-j', 'config=core_release64'],
                                      workdir                       = 'code/build/windows/gmake',
                                      name                          = 'compile core release',
                                      env                           = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                      description                   = 'compiling core release',
                                      descriptionDone               = 'core release'))

for tool in tool_list:
  factory_list['mingw-64'].addStep(Compile(command                  = ['mingw32-make', '-j', 'config=release64'],
                                        workdir                     = 'tools/' + tool + '/build/windows/gmake',
                                        name                        = 'compile ' + tool + ' release',
                                        description                 = 'compiling ' + tool + ' release',
                                        descriptionDone             = tool + ' release'))

factory_list['mingw-64'].addStep(SetPropertyFromCommand(command     = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                     property       = 'date',
                                                     flunkOnFailure = False,
                                                     doStepIf       = lambda step: step.build.getProperty('version') == 'nightly',
                                                     hideStepIf     = True))

factory_list['mingw-64'].addStep(ShellCommand(command               = ['python', 'package.py', '-p', 'mingw-64', '-d', Interpolate('%(prop:date:-)s')],
                                           workdir                  = 'code/build/python',
                                           haltOnFailure            = True,
                                           doStepIf                 = lambda step: step.build.getProperty('version'),
                                           name                     = 'build dev package',
                                           description              = 'building dev package',
                                           descriptionDone          = 'dev package'))

factory_list['mingw-64'].addStep(ShellCommand(command               = ['python', 'package.py', '-p', 'tutomingw-64', '-d', Interpolate('%(prop:date:-)s')],
                                           workdir                  = 'code/build/python',
                                           haltOnFailure            = True,
                                           doStepIf                 = lambda step: step.build.getProperty('version'),
                                           name                     = 'build tutorial package',
                                           description              = 'building tutorial package',
                                           descriptionDone          = 'tutorial package'))

factory_list['mingw-64'].addStep(DirectoryUpload(slavesrc           = 'code/build/python/packages',
                                              masterdest            = './public_html/packages',
                                              url                   = 'http://buildbot.orx-project.org:8010/packages',
                                              doStepIf              = lambda step: step.build.getProperty('version')))


# Mac

factory_list['mac']                                                 = BuildFactory()
factory_list['mac'].workdir                                         = '.'

factory_list['mac'].addStep(Mercurial(repourl                       = 'http://hg.code.sf.net/p/orx/orx',
                                      branchType                    = 'inrepo',
                                      mode                          = 'full',
                                      method                        = 'fresh',
                                      clobberOnBranchChange         = False,
                                      timeout                       = 7200))

factory_list['mac'].addStep(SetProperty(property                    = 'version',
                                        value                       = 'nightly',
                                        flunkOnFailure              = False,
                                        doStepIf                    = lambda step: step.build.getProperty('nightly'),
                                        hideStepIf                  = True))

factory_list['mac'].addStep(ShellCommand(command                    = ['./setup.sh', '../cache'],
                                         workdir                    = '.',
                                         haltOnFailure              = True,
                                         name                       = 'setup',
                                         description                = 'running setup',
                                         descriptionDone            = 'setup'))

factory_list['mac'].addStep(Compile(command                         = ['xcodebuild', '-project', 'orxLIB.xcodeproj', '-configuration', 'Debug', '-arch', 'x86_64', 'ONLY_ACTIVE_ARCH=NO', 'MACOSX_DEPLOYMENT_TARGET=10.9'],
                                    workdir                         = 'code/build/mac/xcode4',
                                    name                            = 'compile engine debug universal',
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling engine debug universal',
                                    descriptionDone                 = 'engine debug universal'))

factory_list['mac'].addStep(Compile(command                         = ['xcodebuild', '-project', 'orxLIB.xcodeproj', '-configuration', 'Profile', '-arch', 'x86_64', 'ONLY_ACTIVE_ARCH=NO', 'MACOSX_DEPLOYMENT_TARGET=10.9'],
                                    workdir                         = 'code/build/mac/xcode4',
                                    name                            = 'compile engine profile universal',
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling engine profile universal',
                                    descriptionDone                 = 'engine profile universal'))

factory_list['mac'].addStep(Compile(command                         = ['xcodebuild', '-project', 'orxLIB.xcodeproj', '-configuration', 'Release', '-arch', 'x86_64', 'ONLY_ACTIVE_ARCH=NO', 'MACOSX_DEPLOYMENT_TARGET=10.9'],
                                    workdir                         = 'code/build/mac/xcode4',
                                    name                            = 'compile engine release universal',
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling engine release universal',
                                    descriptionDone                 = 'engine release universal'))

factory_list['mac'].addStep(Compile(command                         = ['make', '-j', 'config=release32'],
                                    workdir                         = 'tutorial/build/mac/gmake',
                                    warningPattern                  = '^(?!ld).*warning[: ].*',
                                    name                            = 'compile tutorial release 32',
                                    description                     = 'compiling tutorial release 32',
                                    descriptionDone                 = 'tutorial release 32'))

for tool in tool_list:
  factory_list['mac'].addStep(Compile(command                       = ['make', '-j', 'config=release32'],
                                      workdir                       = 'tools/' + tool + '/build/mac/gmake',
                                      warningPattern                = '^(?!ld).*warning[: ].*',
                                      name                          = 'compile ' + tool + ' release 32',
                                      description                   = 'compiling ' + tool + ' release 32',
                                      descriptionDone               = tool + ' release 32'))

factory_list['mac'].addStep(SetPropertyFromCommand(command          = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                   property         = 'date',
                                                   flunkOnFailure   = False,
                                                   doStepIf         = lambda step: step.build.getProperty('version') == 'nightly',
                                                   hideStepIf       = True))

factory_list['mac'].addStep(Compile(command                         = ['xcodebuild', '-project', 'orx.xcodeproj', '-configuration', 'Release', '-arch', 'x86_64', 'ONLY_ACTIVE_ARCH=YES', 'MACOSX_DEPLOYMENT_TARGET=10.9'],
                                    workdir                         = 'code/build/mac/xcode4',
                                    name                            = 'compile engine debug universal',
                                    doStepIf                        = lambda step: step.build.getProperty('version'),
                                    haltOnFailure                   = True,
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling orx release 64',
                                    descriptionDone                 = 'orx release 64',
                                    hideStepIf                      = True))

factory_list['mac'].addStep(ShellCommand(command                    = ['python', 'package.py', '-p', 'mac', '-d', Interpolate('%(prop:date:-)s')],
                                         workdir                    = 'code/build/python',
                                         haltOnFailure              = True,
                                         doStepIf                   = lambda step: step.build.getProperty('version'),
                                         name                       = 'build dev package',
                                         description                = 'building dev package',
                                         descriptionDone            = 'dev package'))

factory_list['mac'].addStep(ShellCommand(command                    = ['python', 'package.py', '-p', 'tutomac', '-d', Interpolate('%(prop:date:-)s')],
                                         workdir                    = 'code/build/python',
                                         haltOnFailure              = True,
                                         doStepIf                   = lambda step: step.build.getProperty('version'),
                                         name                       = 'build tutorial package',
                                         description                = 'building tutorial package',
                                         descriptionDone            = 'tutorial package'))

factory_list['mac'].addStep(DirectoryUpload(slavesrc                = 'code/build/python/packages',
                                            masterdest              = './public_html/packages',
                                            url                     = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf                = lambda step: step.build.getProperty('version')))


# Linux32

factory_list['linux32']                                             = BuildFactory()
factory_list['linux32'].workdir                                     = '.'

factory_list['linux32'].addStep(Mercurial(repourl                   = 'http://hg.code.sf.net/p/orx/orx',
                                          branchType                = 'inrepo',
                                          mode                      = 'full',
                                          method                    = 'fresh',
                                          clobberOnBranchChange     = False,
                                          timeout                   = 7200))

factory_list['linux32'].addStep(SetProperty(property                = 'version',
                                            value                   = 'nightly',
                                            flunkOnFailure          = False,
                                            doStepIf                = lambda step: step.build.getProperty('nightly'),
                                            hideStepIf              = True))

factory_list['linux32'].addStep(ShellCommand(command                = ['./setup.sh', '../cache'],
                                             workdir                = '.',
                                             haltOnFailure          = True,
                                             name                   = 'setup',
                                             description            = 'running setup',
                                             descriptionDone        = 'setup'))

factory_list['linux32'].addStep(Compile(command                     = ['make', '-j', 'config=debug32'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine debug',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine debug',
                                        descriptionDone             = 'engine debug'))

factory_list['linux32'].addStep(Compile(command                     = ['make', '-j', 'config=profile32'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine profile',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine profile',
                                        descriptionDone             = 'engine profile'))

factory_list['linux32'].addStep(Compile(command                     = ['make', '-j', 'config=release32'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine release',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine release',
                                        descriptionDone             = 'engine release'))

factory_list['linux32'].addStep(Compile(command                     = ['make', '-j', 'config=release32'],
                                        workdir                     = 'tutorial/build/linux/gmake',
                                        name                        = 'compile tutorial release',
                                        description                 = 'compiling tutorial release',
                                        descriptionDone             = 'tutorial release'))

factory_list['linux32'].addStep(Compile(command                     = ['make', '-j', 'config=core_release32'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile core release',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling core release',
                                        descriptionDone             = 'core release'))

for tool in tool_list:
  factory_list['linux32'].addStep(Compile(command                   = ['make', '-j', 'config=release32'],
                                          workdir                   = 'tools/' + tool + '/build/linux/gmake',
                                          name                      = 'compile ' + tool + ' release',
                                          description               = 'compiling ' + tool + ' release',
                                          descriptionDone           = tool + ' release'))

factory_list['linux32'].addStep(SetPropertyFromCommand(command      = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                       property     = 'date',
                                                       flunkOnFailure= False,
                                                       doStepIf     = lambda step: step.build.getProperty('version') == 'nightly',
                                                       hideStepIf   = True))

factory_list['linux32'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'linux32', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build dev package',
                                             description            = 'building dev package',
                                             descriptionDone        = 'dev package'))

factory_list['linux32'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'tutolinux32', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build tutorial package',
                                             description            = 'building tutorial package',
                                             descriptionDone        = 'tutorial package'))

factory_list['linux32'].addStep(DirectoryUpload(slavesrc            = 'code/build/python/packages',
                                                masterdest          = './public_html/packages',
                                                url                 = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf            = lambda step: step.build.getProperty('version')))


# Linux64

factory_list['linux64']                                             = BuildFactory()
factory_list['linux64'].workdir                                     = '.'

factory_list['linux64'].addStep(Mercurial(repourl                   = 'http://hg.code.sf.net/p/orx/orx',
                                          branchType                = 'inrepo',
                                          mode                      = 'full',
                                          method                    = 'fresh',
                                          clobberOnBranchChange     = False,
                                          timeout                   = 7200))

factory_list['linux64'].addStep(SetProperty(property                = 'version',
                                            value                   = 'nightly',
                                            flunkOnFailure          = False,
                                            doStepIf                = lambda step: step.build.getProperty('nightly'),
                                            hideStepIf              = True))

factory_list['linux64'].addStep(ShellCommand(command                = ['./setup.sh', '../cache'],
                                             workdir                = '.',
                                             haltOnFailure          = True,
                                             name                   = 'setup',
                                             description            = 'running setup',
                                             descriptionDone        = 'setup'))

factory_list['linux64'].addStep(Compile(command                     = ['make', '-j', 'config=debug64'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine debug',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine debug',
                                        descriptionDone             = 'engine debug'))

factory_list['linux64'].addStep(Compile(command                     = ['make', '-j', 'config=profile64'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine profile',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine profile',
                                        descriptionDone             = 'engine profile'))

factory_list['linux64'].addStep(Compile(command                     = ['make', '-j', 'config=release64'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile engine release',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling engine release',
                                        descriptionDone             = 'engine release'))

factory_list['linux64'].addStep(Compile(command                     = ['make', '-j', 'config=release64'],
                                        workdir                     = 'tutorial/build/linux/gmake',
                                        name                        = 'compile tutorial release',
                                        description                 = 'compiling tutorial release',
                                        descriptionDone             = 'tutorial release'))

factory_list['linux64'].addStep(Compile(command                     = ['make', '-j', 'config=core_release64'],
                                        workdir                     = 'code/build/linux/gmake',
                                        name                        = 'compile core release',
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling core release',
                                        descriptionDone             = 'core release'))

for tool in tool_list:
  factory_list['linux64'].addStep(Compile(command                   = ['make', '-j', 'config=release64'],
                                          workdir                   = 'tools/' + tool + '/build/linux/gmake',
                                          name                      = 'compile ' + tool + ' release',
                                          description               = 'compiling ' + tool + ' release',
                                          descriptionDone           = tool + ' release'))

factory_list['linux64'].addStep(SetPropertyFromCommand(command      = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                       property     = 'date',
                                                       flunkOnFailure= False,
                                                       doStepIf     = lambda step: step.build.getProperty('version') == 'nightly',
                                                       hideStepIf   = True))

factory_list['linux64'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'linux64', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build dev package',
                                             description            = 'building dev package',
                                             descriptionDone        = 'dev package'))

factory_list['linux64'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'tutolinux64', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build tutorial package',
                                             description            = 'building tutorial package',
                                             descriptionDone        = 'tutorial package'))

factory_list['linux64'].addStep(DirectoryUpload(slavesrc            = 'code/build/python/packages',
                                                masterdest          = './public_html/packages',
                                                url                 = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf            = lambda step: step.build.getProperty('version')))


# iOS

factory_list['ios']                                                 = BuildFactory()
factory_list['ios'].workdir                                         = '.'

factory_list['ios'].addStep(Mercurial(repourl                       = 'http://hg.code.sf.net/p/orx/orx',
                                      branchType                    = 'inrepo',
                                      mode                          = 'full',
                                      method                        = 'fresh',
                                      clobberOnBranchChange         = False,
                                      timeout                       = 7200))

factory_list['ios'].addStep(SetProperty(property                    = 'version',
                                        value                       = 'nightly',
                                        flunkOnFailure              = False,
                                        doStepIf                    = lambda step: step.build.getProperty('nightly'),
                                        hideStepIf                  = True))

factory_list['ios'].addStep(ShellCommand(command                    = ['./setup.sh', '../cache'],
                                         workdir                    = '.',
                                         haltOnFailure              = True,
                                         name                       = 'setup',
                                         description                = 'running setup',
                                         descriptionDone            = 'setup'))

factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Debug', '-sdk', 'iphonesimulator', '-destination', "platform=iOS Simulator,name=iPad Air"],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine debug simulator',
                                    description                     = 'compiling engine debug simulator',
                                    descriptionDone                 = 'engine debug simulator'))

factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Profile', '-sdk', 'iphonesimulator', '-destination', "platform=iOS Simulator,name=iPad Air"],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine profile simulator',
                                    description                     = 'compiling engine profile simulator',
                                    descriptionDone                 = 'engine profile simulator'))

factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Release', '-sdk', 'iphonesimulator', '-destination', "platform=iOS Simulator,name=iPad Air"],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine release simulator',
                                    description                     = 'compiling engine release simulator',
                                    descriptionDone                 = 'engine release simulator'))

factory_list['ios'].addStep(ShellCommand(command                    = ['mkdir', 'i386'],
                                         workdir                    = 'code/lib/static/ios',
                                         haltOnFailure              = True,
                                         hideStepIf                 = True,
                                         name                       = 'create i386 folder',
                                         description                = 'creating i386 folder',
                                         descriptionDone            = 'create i386 folder'))

factory_list['ios'].addStep(ShellCommand(command                    = ['mv', 'liborx.a', 'liborxp.a', 'liborxd.a', 'i386'],
                                         workdir                    = 'code/lib/static/ios',
                                         hideStepIf                 = True,
                                         name                       = 'move engine simulator',
                                         description                = 'moving engine simulator',
                                         descriptionDone            = 'move engine simulator'))


factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Debug', '-sdk', 'iphoneos'],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine debug device',
                                    description                     = 'compiling engine debug device',
                                    descriptionDone                 = 'engine debug device'))

factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Profile', '-sdk', 'iphoneos'],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine profile device',
                                    description                     = 'compiling engine profile device',
                                    descriptionDone                 = 'engine profile device'))

factory_list['ios'].addStep(Compile(command                         = ['xcodebuild', '-workspace', 'project.xcworkspace', '-scheme', 'orxLIB', '-configuration', 'Release', '-sdk', 'iphoneos'],
                                    workdir                         = 'code/build/ios/xcode/orx-ios.xcodeproj',
                                    name                            = 'compile engine release device',
                                    description                     = 'compiling engine release device',
                                    descriptionDone                 = 'engine release device'))

factory_list['ios'].addStep(ShellCommand(command                    = ['mkdir', 'arm'],
                                         workdir                    = 'code/lib/static/ios',
                                         haltOnFailure              = True,
                                         hideStepIf                 = True,
                                         name                       = 'create arm folder',
                                         description                = 'creating arm folder',
                                         descriptionDone            = 'create arm folder'))

factory_list['ios'].addStep(ShellCommand(command                    = ['mv', 'liborx.a', 'liborxp.a', 'liborxd.a', 'arm'],
                                         workdir                    = 'code/lib/static/ios',
                                         hideStepIf                 = True,
                                         name                       = 'move engine device',
                                         description                = 'moving engine device',
                                         descriptionDone            = 'move engine device'))


factory_list['ios'].addStep(Compile(command                         = ['lipo', '-create', 'i386/liborxd.a', 'arm/liborxd.a', '-output', 'liborxd.a'],
                                    workdir                         = 'code/lib/static/ios',
                                    name                            = 'create engine debug universal',
                                    description                     = 'creating engine debug universal',
                                    descriptionDone                 = 'engine debug universal'))

factory_list['ios'].addStep(Compile(command                         = ['lipo', '-create', 'i386/liborxp.a', 'arm/liborxp.a', '-output', 'liborxp.a'],
                                    workdir                         = 'code/lib/static/ios',
                                    name                            = 'create engine profile universal',
                                    description                     = 'creating engine profile universal',
                                    descriptionDone                 = 'engine profile universal'))

factory_list['ios'].addStep(Compile(command                         = ['lipo', '-create', 'i386/liborx.a', 'arm/liborx.a', '-output', 'liborx.a'],
                                    workdir                         = 'code/lib/static/ios',
                                    name                            = 'create engine release universal',
                                    description                     = 'creating engine release universal',
                                    descriptionDone                 = 'engine release universal'))


factory_list['ios'].addStep(ShellCommand(command                    = ['zip', '../../../../liborx-fat-sdk9.2.zip', 'liborx.a', 'liborxp.a', 'liborxd.a'],
                                         workdir                    = 'code/lib/static/ios',
                                         haltOnFailure              = True,
                                         # This is misbehaving when revision = *nightly* ?!? doStepIf                   = lambda step: step.build.getProperty('version'),
                                         hideStepIf                 = True,
                                         name                       = 'archive fat lib',
                                         description                = 'archiving fat lib',
                                         descriptionDone            = 'fat lib archive'))

factory_list['ios'].addStep(SetPropertyFromCommand(command          = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                   property         = 'date',
                                                   flunkOnFailure   = False,
                                                   doStepIf         = lambda step: step.build.getProperty('version') == 'nightly',
                                                   hideStepIf       = True))

factory_list['ios'].addStep(Compile(command                         = ['make', '-j', 'config=core_release64'],
                                    workdir                         = 'code/build/mac/gmake',
                                    name                            = 'compile core release',
                                    doStepIf                        = lambda step: step.build.getProperty('version'),
                                    haltOnFailure                   = True,
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling core release',
                                    descriptionDone                 = 'core release',
                                    hideStepIf                      = True))

factory_list['ios'].addStep(ShellCommand(command                    = ['python', 'package.py', '-p', 'ios', '-d', Interpolate('%(prop:date:-)s')],
                                         workdir                    = 'code/build/python',
                                         haltOnFailure              = True,
                                         doStepIf                   = lambda step: step.build.getProperty('version'),
                                         name                       = 'build ios package',
                                         description                = 'building ios package',
                                         descriptionDone            = 'ios package'))

factory_list['ios'].addStep(DirectoryUpload(slavesrc                = 'code/build/python/packages',
                                            masterdest              = './public_html/packages',
                                            url                     = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf                = lambda step: step.build.getProperty('version')))


# Android

factory_list['android']                                             = BuildFactory()
factory_list['android'].workdir                                     = '.'

factory_list['android'].addStep(Mercurial(repourl                   = 'http://hg.code.sf.net/p/orx/orx',
                                          branchType                = 'inrepo',
                                          mode                      = 'full',
                                          method                    = 'fresh',
                                          clobberOnBranchChange     = False,
                                          timeout                   = 7200))

factory_list['android'].addStep(SetProperty(property                = 'version',
                                            value                   = 'nightly',
                                            flunkOnFailure          = False,
                                            doStepIf                = lambda step: step.build.getProperty('nightly'),
                                            hideStepIf              = True))

factory_list['android'].addStep(ShellCommand(command                = ['setup', '../cache'],
                                             workdir                = '.',
                                             haltOnFailure          = True,
                                             name                   = 'setup',
                                             description            = 'running setup',
                                             descriptionDone        = 'setup'))

factory_list['android'].addStep(Compile(command                     = ['ndk-build', '-j'],
                                        workdir                     = 'code/build/android',
                                        name                        = 'compile android',
                                        description                 = 'compiling android',
                                        descriptionDone             = 'android'))

factory_list['android'].addStep(SetPropertyFromCommand(command      = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                       property     = 'date',
                                                       flunkOnFailure= False,
                                                       doStepIf     = lambda step: step.build.getProperty('version') == 'nightly',
                                                       hideStepIf   = True))

factory_list['android'].addStep(MsBuild16(projectfile               = 'code/build/windows/vs2019/orx.sln',
                                          platform                  = 'x64',
                                          config                    = 'Core Release',
                                          mode                      = 'rebuild',
                                          name                      = 'compile core release',
                                          env                       = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                          description               = 'compiling core release',
                                          descriptionDone           = 'core release',
                                          hideStepIf                = True))

factory_list['android'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'android', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build android package',
                                             description            = 'building android package',
                                             descriptionDone        = 'android package'))

factory_list['android'].addStep(DirectoryUpload(slavesrc            = 'code/build/python/packages',
                                                masterdest          = './public_html/packages',
                                                url                 = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf            = lambda step: step.build.getProperty('version')))

# Android Native

factory_list['android-native']                                      = BuildFactory()
factory_list['android-native'].workdir                              = '.'

factory_list['android-native'].addStep(Mercurial(repourl            = 'http://hg.code.sf.net/p/orx/orx',
                                                 branchType         = 'inrepo',
                                                 mode               = 'full',
                                                 method             = 'fresh',
                                                 clobberOnBranchChange= False,
                                                 timeout            = 7200))

factory_list['android-native'].addStep(SetProperty(property         = 'version',
                                                   value            = 'nightly',
                                                   flunkOnFailure   = False,
                                                   doStepIf         = lambda step: step.build.getProperty('nightly'),
                                                   hideStepIf       = True))

factory_list['android-native'].addStep(ShellCommand(command         = ['setup', '../cache'],
                                                    workdir         = '.',
                                                    haltOnFailure   = True,
                                                    name            = 'setup',
                                                    description     = 'running setup',
                                                    descriptionDone = 'setup'))

factory_list['android-native'].addStep(Compile(command              = ['ndk-build', '-j'],
                                               workdir              = 'code/build/android-native',
                                               name                 = 'compile android-native',
                                               description          = 'compiling android-native',
                                               descriptionDone      = 'android-native'))

factory_list['android-native'].addStep(SetPropertyFromCommand(command= ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                       property                     = 'date',
                                       flunkOnFailure               = False,
                                       doStepIf                     = lambda step: step.build.getProperty('version') == 'nightly',
                                       hideStepIf                   = True))

factory_list['android-native'].addStep(MsBuild16(projectfile        = 'code/build/windows/vs2019/orx.sln',
                                                 platform           = 'x64',
                                                 config             = 'Core Release',
                                                 mode               = 'rebuild',
                                                 name               = 'compile core release',
                                                 env                = {'ORXFLAGS': Interpolate('%(prop:version:#?|/D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                                 description        = 'compiling core release',
                                                 descriptionDone    = 'core release',
                                                 hideStepIf         = True))

factory_list['android-native'].addStep(ShellCommand(command         = ['python', 'package.py', '-p', 'android-native', '-d', Interpolate('%(prop:date:-)s')],
                                                    workdir         = 'code/build/python',
                                                    haltOnFailure   = True,
                                                    doStepIf        = lambda step: step.build.getProperty('version'),
                                                    name            = 'build android-native package',
                                                    description     = 'building android-native package',
                                                    descriptionDone = 'android-native package'))

factory_list['android-native'].addStep(DirectoryUpload(slavesrc     = 'code/build/python/packages',
                                                       masterdest   = './public_html/packages',
                                                       url          = 'http://buildbot.orx-project.org:8010/packages',
                                                       doStepIf     = lambda step: step.build.getProperty('version')))


# Doxygen

factory_list['doxygen']                                             = BuildFactory()
factory_list['doxygen'].workdir                                     = '.'

factory_list['doxygen'].addStep(Mercurial(repourl                   = 'http://hg.code.sf.net/p/orx/orx',
                                          branchType                = 'inrepo',
                                          mode                      = 'full',
                                          method                    = 'fresh',
                                          clobberOnBranchChange     = False,
                                          timeout                   = 7200))

factory_list['doxygen'].addStep(SetProperty(property                = 'version',
                                            value                   = 'nightly',
                                            flunkOnFailure          = False,
                                            doStepIf                = lambda step: step.build.getProperty('nightly'),
                                            hideStepIf              = True))

factory_list['doxygen'].addStep(ShellCommand(command                = ['setup', '../cache'],
                                             workdir                = '.',
                                             haltOnFailure          = True,
                                             name                   = 'setup',
                                             description            = 'running setup',
                                             descriptionDone        = 'setup',
                                             hideStepIf             = True))

factory_list['doxygen'].addStep(Compile(command                     = ['mingw32-make', '-j', 'config=core_release64'],
                                        workdir                     = 'code/build/windows/gmake',
                                        name                        = 'compile core release',
                                        haltOnFailure               = True,
                                        env                         = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                        description                 = 'compiling core release',
                                        descriptionDone             = 'core release',
                                        hideStepIf                  = True))

factory_list['doxygen'].addStep(SetPropertyFromCommand(command      = ['orx', '-v', 'true'],
                                                       workdir      = 'code/bin',
                                                       property     = 'orx-version',
                                                       flunkOnFailure= False,
                                                       hideStepIf   = True))

factory_list['doxygen'].addStep(ShellCommand(command                = ['cmd', '/c', '(', 'type', 'doxyfile', '&', 'echo', 'PROJECT_NUMBER=', Property('orx-version'), ')', '|', 'doxygen', '-'],
                                             workdir                = '.',
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             hideStepIf             = lambda results, step: not step.build.getProperty('version'),
                                             name                   = 'doxygen',
                                             description            = 'running doxygen',
                                             descriptionDone        = 'doxygen'))

factory_list['doxygen'].addStep(ShellCommand(command                = ['doxygen', 'doxyfile'],
                                             workdir                = '.',
                                             doStepIf               = lambda step: not step.build.getProperty('version'),
                                             hideStepIf             = lambda results, step: step.build.getProperty('version'),
                                             name                   = 'doxygen',
                                             description            = 'running doxygen',
                                             descriptionDone        = 'doxygen'))

factory_list['doxygen'].addStep(ShellCommand(command                = ['hg', 'add', 'doc/html'],
                                             workdir                = '.',
                                             doStepIf               = lambda step: not step.build.getProperty('version'),
                                             decodeRC               = {0: SUCCESS, 1: SUCCESS},
                                             name                   = 'add new doc files',
                                             description            = 'running doxygen',
                                             descriptionDone        = 'doxygen add'))

factory_list['doxygen'].addStep(ShellCommand(command                = ['hg', 'commit', '-m', '- Automatic update of doxygen docs, triggered by buildbot'],
                                             workdir                = '.',
                                             doStepIf               = lambda step: not step.build.getProperty('version'),
                                             flunkOnFailure         = False,
                                             decodeRC               = {0: SUCCESS, 1: SUCCESS},
                                             name                   = 'commit doc files',
                                             description            = 'commiting doxygen',
                                             descriptionDone        = 'doxygen commit'))

factory_list['doxygen'].addStep(ShellCommand(command                = ['hg', 'push'],
                                             workdir                = '.',
                                             doStepIf               = lambda step: not step.build.getProperty('version'),
                                             flunkOnFailure         = False,
                                             decodeRC               = {0: SUCCESS, 1: SUCCESS},
                                             name                   = 'push doc files',
                                             description            = 'pushing doxygen',
                                             descriptionDone        = 'doxygen push'))

factory_list['doxygen'].addStep(SetPropertyFromCommand(command      = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                       property     = 'date',
                                                       flunkOnFailure= False,
                                                       doStepIf     = lambda step: step.build.getProperty('version'),
                                                       hideStepIf   = True))

factory_list['doxygen'].addStep(ShellCommand(command                = ['python', 'package.py', '-p', 'doxygen', '-d', Interpolate('%(prop:date:-)s')],
                                             workdir                = 'code/build/python',
                                             haltOnFailure          = True,
                                             doStepIf               = lambda step: step.build.getProperty('version'),
                                             name                   = 'build package',
                                             description            = 'building package',
                                             descriptionDone        = 'package'))

factory_list['doxygen'].addStep(DirectoryUpload(slavesrc            = 'code/build/python/packages',
                                                masterdest          = './public_html/packages',
                                                url                 = 'http://buildbot.orx-project.org:8010/packages',
                                                doStepIf            = lambda step: step.build.getProperty('version')))


# Src

factory_list['src']                                                 = BuildFactory()
factory_list['src'].workdir                                         = '.'

factory_list['src'].addStep(Mercurial(repourl                       = 'http://hg.code.sf.net/p/orx/orx',
                                      branchType                    = 'inrepo',
                                      mode                          = 'full',
                                      method                        = 'fresh',
                                      clobberOnBranchChange         = False,
                                      timeout                       = 7200))

factory_list['src'].addStep(ShellCommand(command                    = ['setup', '../cache'],
                                         workdir                    = '.',
                                         haltOnFailure              = True,
                                         name                       = 'setup',
                                         description                = 'running setup',
                                         descriptionDone            = 'setup'))

for premakeinfo in src_premake_list:
  factory_list['src'].addStep(ShellCommand(command                  = ['premake4', '--os=' + premakeinfo['os'], premakeinfo['action']],
                                           workdir                  = 'code/build',
                                           haltOnFailure            = True,
                                           name                     = 'premake ' + premakeinfo['os'] + '/' + premakeinfo['action'],
                                           description              = 'running premake ' + premakeinfo['os'] + '/' + premakeinfo['action'],
                                           descriptionDone          = 'premake ' + premakeinfo['os'] + '/' + premakeinfo['action']))

factory_list['src'].addStep(SetProperty(property                    = 'version',
                                        value                       = 'nightly',
                                        flunkOnFailure              = False,
                                        doStepIf                    = lambda step: step.build.getProperty('nightly'),
                                        hideStepIf                  = True))

factory_list['src'].addStep(SetPropertyFromCommand(command          = ['python', '-c', 'import datetime; print(str(datetime.date.today()))'],
                                                   property         = 'date',
                                                   flunkOnFailure   = False,
                                                   doStepIf         = lambda step: step.build.getProperty('version') == 'nightly',
                                                   hideStepIf       = True))

factory_list['src'].addStep(Compile(command                         = ['mingw32-make', '-j', 'config=core_release64'],
                                    workdir                         = 'code/build/windows/gmake',
                                    name                            = 'compile core release',
                                    doStepIf                        = lambda step: step.build.getProperty('version'),
                                    haltOnFailure                   = True,
                                    env                             = {'ORXFLAGS': Interpolate('%(prop:version:#?|-D__orxVERSION_RELEASE__=|)s%(prop:version:~)s')},
                                    description                     = 'compiling core release',
                                    descriptionDone                 = 'core release',
                                    hideStepIf                      = True))

factory_list['src'].addStep(ShellCommand(command                    = ['python', 'package.py', '-p', 'src', '-d', Interpolate('%(prop:date:-)s')],
                                         workdir                    = 'code/build/python',
                                         haltOnFailure              = True,
                                         doStepIf                   = lambda step: step.build.getProperty('version'),
                                         name                       = 'build package',
                                         description                = 'building package',
                                         descriptionDone            = 'package'))

factory_list['src'].addStep(DirectoryUpload(slavesrc                = 'code/build/python/packages',
                                            masterdest              = './public_html/packages',
                                            url                     = 'http://buildbot.orx-project.org:8010/packages',
                                            doStepIf                = lambda step: step.build.getProperty('version')))


# Nightly

factory_list['nightly']                                             = BuildFactory()
factory_list['nightly'].workdir                                     = '.'

factory_list['nightly'].addStep(MasterShellCommand(command          = ['sftp', '-b', 'nightly-upload', 'keleborn,orx@frs.sourceforge.net'],
                                                   name             = 'upload to sourceforge',
                                                   description      = 'uploading to sourceforge',
                                                   descriptionDone  = 'sourceforge upload'))

factory_list['nightly'].addStep(MasterShellCommand(command          = ['./nightly-clean'],
                                                   name             = 'remove local packages',
                                                   description      = 'removing local packages',
                                                   descriptionDone  = 'local packages removed'))


# Builders

from buildbot.config import BuilderConfig

c['builders'] = []

builder_table = dict()

for slave in slave_list:
  for builder in slave['builders']:
    if builder not in builder_table:
      builder_table[builder] = []
    builder_table[builder].append('orx-' + slave['os'] + '-slave-' + slave['owner'])

for key in builder_table.keys():
  c['builders'].append(BuilderConfig(name           = key,
                                     slavenames     = builder_table[key],
                                     slavebuilddir  = 'orx',
                                     category       = 'compile',
                                     locks          = [slave_lock.access('counting')],
                                     factory        = factory_list[key]))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(auth                = auth.BasicAuth([('orx', '')]),
                        gracefulShutdown    = 'auth',
                        forceBuild          = 'auth',
                        forceAllBuilds      = 'auth',
                        pingBuilder         = 'auth',
                        stopBuild           = 'auth',
                        stopAllBuilds       = 'auth',
                        cancelPendingBuild  = 'auth')

irc = words.IRC('chat.freenode.net',
                'orxbot',
                channels                    = [{'channel': '#orx-project'}],
                password                    = '',
                allowForce                  = True)

c['status'].append(html.WebStatus(http_port             = 8010,
                                  authz                 = authz_cfg,
                                  revlink               = 'http://hg.code.sf.net/p/orx/orx/rev/%s'))

c['status'].append(irc)


####### PROJECT IDENTITY

# The 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title']      = 'Orx - Portable Game Engine'
c['titleURL']   = 'https://orx-project.org'

# The 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://buildbot.orx-project.org:8010/'


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
