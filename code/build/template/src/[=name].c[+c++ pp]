/**
 * @file [name].c[+c++ pp]
 * @date [date]
 */

[+scroll
#define __SCROLL_IMPL__
#include "[name].h"
#undef __SCROLL_IMPL__

#include "Object.h"]
[-scroll #include "orx.h"]
#include "orxExtensions.h"

#ifdef __orxMSVC__

/* Requesting high performance dedicated GPU on hybrid laptops */
__declspec(dllexport) unsigned long NvOptimusEnablement        = 1;
__declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;

#endif // __orxMSVC__

/** Update function, it has been registered to be called every tick of the core clock
 */
[+scroll void [!name]::Update(const orxCLOCK_INFO &_rstClockInfo)]
[-scroll void orxFASTCALL Update(const orxCLOCK_INFO *_pstClockInfo, void *_pContext)]
{
[+nuklear
  // Show a small Nuklear demo
  if(nk_begin(&sstNuklear.stContext, "Demo", nk_rect(50, 50, 200, 200), NK_WINDOW_BORDER | NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE | NK_WINDOW_MINIMIZABLE | NK_WINDOW_TITLE))
  {
    enum {EASY, HARD};
    static orxS32 Op = EASY;
    static orxS32 Property = 20;

    nk_layout_row_static(&sstNuklear.stContext, 30, 80, 1);
    if (nk_button_label(&sstNuklear.stContext, "button"))
    {
      orxLOG("Nuklear button pressed.");
    }
    nk_layout_row_dynamic(&sstNuklear.stContext, 30, 2);
    if(nk_option_label(&sstNuklear.stContext, "easy", Op == EASY))
    {
      Op = EASY;
    }
    if(nk_option_label(&sstNuklear.stContext, "hard", Op == HARD))
    {
      Op = HARD;
    }
    nk_layout_row_dynamic(&sstNuklear.stContext, 25, 1);
    nk_property_int(&sstNuklear.stContext, "Compression:", 0, (int *)&Property, 100, 10, 1);
  }
  nk_end(&sstNuklear.stContext);
]
[+imgui
  // Show Dear ImGui's demo and stats windows
  ImGui::ShowDemoWindow();
  ImGui::ShowMetricsWindow();
]
  // Should quit?
  if(orxInput_HasBeenActivated("Quit"))
  {
    // Send close event
    orxEvent_SendShort(orxEVENT_TYPE_SYSTEM, orxSYSTEM_EVENT_CLOSE);
  }
}

/** Init function, it is called when all orx's modules have been initialized
 */
[+scroll orxSTATUS [!name]::Init()]
[-scroll orxSTATUS orxFASTCALL Init()]
{
  // Init extensions
  InitExtensions();

  // Push [Main] as the default config section
  orxConfig_PushSection("Main");

  // Create the viewports
  for(orxS32 i = 0, iCount = orxConfig_GetListCount("ViewportList"); i < iCount; i++)
  {
    orxViewport_CreateFromConfig(orxConfig_GetListString("ViewportList", i));
  }

[+scroll
  // Create the [-movie scene][+movie splash screen]
  CreateObject("[-movie Scene][+movie Splash]");
]
[-scroll
  // Register the Update function to the core clock
  orxClock_Register(orxClock_Get(orxCLOCK_KZ_CORE), Update, orxNULL, orxMODULE_ID_MAIN, orxCLOCK_PRIORITY_NORMAL);

  // Create the [-movie scene][+movie splash screen]
  orxObject_CreateFromConfig("[-movie Scene][+movie Splash]");
]

  // Done!
  return orxSTATUS_SUCCESS;
}

/** Run function, it should not contain any game logic
 */
[+scroll orxSTATUS [!name]::Run()]
[-scroll orxSTATUS orxFASTCALL Run()]
{
  // Return orxSTATUS_FAILURE to instruct orx to quit
  return orxSTATUS_SUCCESS;
}

/** Exit function, it is called before exiting from orx
 */
[+scroll void [!name]::Exit()]
[-scroll void orxFASTCALL Exit()]
{
  // Exit from extensions
  ExitExtensions();

  // Let orx clean all our mess automatically. :)
}

[+scroll
/** BindObjects function, ScrollObject-derived classes are bound to config sections here
 */
void [!name]::BindObjects()
{
  // Bind the Object class
  BindObject(Object);
}
]
/** Bootstrap function, it is called before config is initialized, allowing for early resource storage definitions
 */
[+scroll orxSTATUS [!name]::Bootstrap() const]
[-scroll orxSTATUS orxFASTCALL Bootstrap()]
{
  // Bootstrap extensions
  BootstrapExtensions();

  // Return orxSTATUS_FAILURE to prevent orx from loading the default config file
  return orxSTATUS_SUCCESS;
}

/** Main function
 */
int main(int argc, char **argv)
{
[+scroll
  // Execute our game
  [!name]::GetInstance().Execute(argc, argv);]
[-scroll
  // Set the bootstrap function to provide at least one resource storage before loading any config files
  orxConfig_SetBootstrap(Bootstrap);

  // Execute our game
  orx_Execute(argc, argv, Init, Run, Exit);]

  // Done!
  return EXIT_SUCCESS;
}
