//! Includes

#ifndef _orxCHEAT_H_
#define _orxCHEAT_H_

#include "orx.h"


//! Prototypes

orxSTATUS orxFASTCALL                       orxCheat_Init();
void orxFASTCALL                            orxCheat_Exit();
void orxFASTCALL                            orxCheat_Enable(orxBOOL _bEnable);


//! Defines

#define orxCHEAT_KZ_CONFIG_SECTION          "Cheats"
#define orxCHEAT_KZ_CONFIG_COMMAND          "Command"
#define orxCHEAT_KZ_CONFIG_ROOT             "Cheat"
#define orxCHEAT_KC_CONFIG_SEPARATOR        ':'
#define orxCHEAT_KZ_CONFIG_PREFIX           (orxCHEAT_KZ_CONFIG_ROOT ":")
#define orxCHEAT_KZ_INPUT_SET               "orx:input:cheat"
#define orxCHEAT_KU32_MAX_JOYSTICK          4


#ifdef orxCHEAT_IMPL


//! Variables / Structures

typedef struct __orxCHEAT_t
{
  const orxSTRING zCurrent;
  orxBOOL         bInit;

} orxCHEAT;

static orxCHEAT sstCheat;


//! Code

static void orxFASTCALL orxCheat_CommandEnable(orxU32 _u32ArgNumber, const orxCOMMAND_VAR *_astArgList, orxCOMMAND_VAR *_pstResult)
{
  /* Enable? */
  if((_u32ArgNumber == 0) || (_astArgList[0].bValue != orxFALSE))
  {
    /* Enable cheats */
    orxCheat_Enable(orxTRUE);

    /* Updates result */
    _pstResult->bValue = orxTRUE;
  }
  else
  {
    /* Disable cheats */
    orxCheat_Enable(orxFALSE);

    /* Updates result */
    _pstResult->bValue = orxFALSE;
  }

  // Done!
  return;
}

static orxBOOL orxFASTCALL orxCheat_CheckInput(const orxSTRING _zKeyName, const orxSTRING _zSectionName, void *_pContext)
{
  const orxSTRING  *pzSection;
  orxBOOL           bResult = orxTRUE;

  // Gets section
  pzSection = (const orxSTRING *)_pContext;

  // Is input active?
  if(orxInput_HasBeenActivated(_zKeyName))
  {
    // Follow transition
    *pzSection = orxConfig_GetString(_zKeyName);

    // Push new state section
    orxConfig_PushSection(*pzSection);

    // Is cheat code complete?
    if(orxConfig_HasValue(orxCHEAT_KZ_CONFIG_COMMAND))
    {
      orxCOMMAND_VAR stResult;

      // Cheat!
      orxCommand_Evaluate(orxConfig_GetString(orxCHEAT_KZ_CONFIG_COMMAND), &stResult);

      // Go back to the beginning
      *pzSection = orxCHEAT_KZ_CONFIG_ROOT;
    }

    // Pop new state section
    orxConfig_PopSection();

    // Updates result
    bResult = orxFALSE;
  }

  // Done!
  return bResult;
}

static void orxFASTCALL orxCheat_Update(const orxCLOCK_INFO *_pstClockInfo, void *_pstContext)
{
  const orxSTRING zInput;
  orxINPUT_TYPE   eType;
  orxENUM         eID;
  orxFLOAT        fValue;
  orxU32          u32Dummy, u32Section;
  orxSTATUS       eCheckStatus = orxSTATUS_SUCCESS;

  // Retrieve cheat state
  const orxSTRING zSection = sstCheat.zCurrent ? sstCheat.zCurrent : orxCHEAT_KZ_CONFIG_ROOT;
  const orxSTRING azSections[2] = {zSection, orxNULL};

  // Push input set
  orxInput_PushSet(orxCHEAT_KZ_INPUT_SET);

  // Any input?
  if(orxInput_GetActiveBinding(&eType, &eID, &fValue)
  && (orxInput_GetBoundInput(eType, eID, orxINPUT_MODE_FULL, 0, &zInput, &u32Dummy) != orxSTATUS_FAILURE)
  && orxInput_HasBeenActivated(zInput))
  {
    // Default back to the beginning
    azSections[1] = orxCHEAT_KZ_CONFIG_ROOT;
  }

  // For all sections
  for(u32Section = 0;
      (eCheckStatus != orxSTATUS_FAILURE)
    && (u32Section < orxARRAY_GET_ITEM_COUNT(azSections))
    && (azSections[u32Section] != orxNULL);
      u32Section++)
  {
    // Select it
    zSection = azSections[u32Section];
    orxConfig_PushSection(zSection);

    // Check all possible inputs (transitions)
    eCheckStatus = orxConfig_ForAllKeys(orxCheat_CheckInput, orxFALSE, &zSection);

    // Deselect it
    orxConfig_PopSection();
  }

  // Update cheat state
  sstCheat.zCurrent = zSection;

  // Pop input set
  orxInput_PopSet();

  // Done!
  return;
}

static orxBOOL orxFASTCALL orxCheat_ProcessCheat(const orxSTRING _zKeyName, const orxSTRING _zSectionName, void *_pContext)
{
  orxCHAR         acState[256], acInput[16], *pcState;
  const orxSTRING zCheat;
  const orxSTRING zCommand;
  const orxCHAR  *pcCheat;
  orxBOOL         bResult = orxTRUE;

  // Get cheat sequence & command
  zCheat    = _zKeyName;
  zCommand  = orxConfig_GetString(zCheat);

  // For all defined cheats
  orxString_NPrint(acState, sizeof(acState), orxCHEAT_KZ_CONFIG_ROOT);
  for(pcCheat = zCheat, pcState = acState;
      (*pcCheat != orxCHAR_NULL)
   && ((*pcCheat != orxCHEAT_KC_CONFIG_SEPARATOR)
    || (*(pcCheat + 1) != orxCHAR_NULL))
   && (pcState - acState < sizeof(acState) - 1);
      pcCheat++)
  {
    // Push current state's section
    orxConfig_PushSection(acState);

    // Already has a cheat command?
    if(orxConfig_HasValue(orxCHEAT_KZ_CONFIG_COMMAND))
    {
      // Log error
      orxDEBUG_PRINT(orxDEBUG_LEVEL_SYSTEM, "Cheat [%s] is clobbered by [%s], removing!", acState, zCheat);

      // Clear cheat command
      orxConfig_ClearValue(orxCHEAT_KZ_CONFIG_COMMAND);
    }

    // First state?
    if(pcState == acState)
    {
      // Print prefix
      pcState = acState + orxString_NPrint(acState, sizeof(acState), orxCHEAT_KZ_CONFIG_PREFIX);
    }

    // Separator mode?
    if(*pcCheat == orxCHEAT_KC_CONFIG_SEPARATOR)
    {
      const orxSTRING zNextSeparator;

      // Get input
      zNextSeparator = orxString_SearchChar(pcCheat + 1, orxCHEAT_KC_CONFIG_SEPARATOR);
      pcCheat += orxString_NPrint(acInput, sizeof(acInput), "%.*s", (orxU32)(zNextSeparator ? zNextSeparator - pcCheat - 1 : sizeof(acInput)), pcCheat + 1);
    }
    // Single character mode
    else
    {
      // Get input
      orxString_NPrint(acInput, sizeof(acInput), "%c", *pcCheat);
    }

    // Convert input to upper case
    orxString_UpperCase(acInput);

    // Update state
    pcState += orxString_NPrint(pcState, sizeof(acState) - (orxU32)(pcState - acState), "%s", acInput);

    // Store it
    orxConfig_SetString(acInput, acState);

    // Pop current state's section
    orxConfig_PopSection();
  }

  // Push current state section
  orxConfig_PushSection(acState);

  // Clear cheat command
  orxConfig_ClearValue(orxCHEAT_KZ_CONFIG_COMMAND);

  // Not a sub-sequence of an existing cheat?
  if(orxConfig_GetKeyCount() == 0)
  {
    // Store the cheat command
    orxConfig_SetString(orxCHEAT_KZ_CONFIG_COMMAND, zCommand);
  }
  else
  {
    // Log error
    orxDEBUG_PRINT(orxDEBUG_LEVEL_SYSTEM, "Cheat [%s] is a sub-sequence of another existing cheat, skipping!", acState);
  }

  // Pop current state section
  orxConfig_PopSection();

  // Done!
  return bResult;
}

orxSTATUS orxCheat_Init()
{
  orxSTATUS eResult = orxSTATUS_SUCCESS;

  // Not initialized?
  if(!sstCheat.bInit)
  {
    orxU32          i, u32CheatCount;
    const orxSTRING zButton;

    // Init structure
    orxMemory_Zero(&sstCheat, sizeof(orxCHEAT));

    // Push cheat input set section
    orxConfig_PushSection(orxCHEAT_KZ_INPUT_SET);

    // Bind all keyboard inputs
    for(orxKEYBOARD_KEY eKey = orxKEYBOARD_KEY_A; eKey <= orxKEYBOARD_KEY_Z; eKey = (orxKEYBOARD_KEY)(eKey + 1))
    {
      orxConfig_SetString(orxKeyboard_GetKeyName(eKey), orxKeyboard_GetKeyDisplayName(eKey));
    }
    for(orxKEYBOARD_KEY eKey = orxKEYBOARD_KEY_QUOTE; eKey <= orxKEYBOARD_KEY_BACKQUOTE; eKey = (orxKEYBOARD_KEY)(eKey + 1))
    {
      orxConfig_SetString(orxKeyboard_GetKeyName(eKey), orxKeyboard_GetKeyDisplayName(eKey));
    }
    for(orxKEYBOARD_KEY eKey = orxKEYBOARD_KEY_0; eKey <= orxKEYBOARD_KEY_9; eKey = (orxKEYBOARD_KEY)(eKey + 1))
    {
      const orxSTRING zName = orxKeyboard_GetKeyName(eKey);
      orxConfig_SetString(zName, zName + 4);
    }
    for(orxKEYBOARD_KEY eKey = orxKEYBOARD_KEY_RIGHT; eKey <= orxKEYBOARD_KEY_UP; eKey = (orxKEYBOARD_KEY)(eKey + 1))
    {
      const orxSTRING zName = orxKeyboard_GetKeyName(eKey);
      orxConfig_SetString(zName, zName + 4);
    }
    for(orxKEYBOARD_KEY eKey = orxKEYBOARD_KEY_NUMPAD_0; eKey <= orxKEYBOARD_KEY_NUMPAD_9; eKey = (orxKEYBOARD_KEY)(eKey + 1))
    {
      const orxSTRING zName = orxKeyboard_GetKeyName(eKey);
      orxConfig_SetString(zName, zName + 11);
    }
    orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_ENTER), "START");
    orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_NUMPAD_ENTER), "START");
    zButton = "LBUMPER", orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_LCTRL), zButton), orxConfig_AppendListString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_L), &zButton, 1);
    zButton = "RBUMPER", orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_RCTRL), zButton), orxConfig_AppendListString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_R), &zButton, 1);
    zButton = "LTRIGGER", orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_LSHIFT), zButton);
    zButton = "RTRIGGER", orxConfig_SetString(orxKeyboard_GetKeyName(orxKEYBOARD_KEY_RSHIFT), zButton);

    // Bind all joystick inputs
    for(orxJOYSTICK_BUTTON eButton = orxJOYSTICK_BUTTON_A_1; eButton <= orxJOYSTICK_BUTTON_LEFT_1; eButton = (orxJOYSTICK_BUTTON)(eButton + 1))
    {
      orxCHAR acBuffer[16];
      acBuffer[orxString_NPrint(acBuffer, sizeof(acBuffer), "%s", orxJoystick_GetButtonName(eButton)) - 2] = orxCHAR_NULL;
      for(i = 0; i < orxCHEAT_KU32_MAX_JOYSTICK; i++)
      {
        orxConfig_SetString(orxJoystick_GetButtonName((orxJOYSTICK_BUTTON)(eButton + i * orxJOYSTICK_BUTTON_SINGLE_NUMBER)), acBuffer + 4);
      }
    }
    for(i = 0; i < orxCHEAT_KU32_MAX_JOYSTICK; i++)
    {
      orxCHAR acBuffer[16];
      orxString_NPrint(acBuffer, sizeof(acBuffer), "-%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_LX_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "LEFT");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "-%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_RX_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "LEFT");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "+%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_LX_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "RIGHT");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "+%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_RX_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "RIGHT");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "-%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_LY_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "UP");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "-%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_RY_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "UP");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "+%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_LY_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "DOWN");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "+%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_RY_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "DOWN");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_LTRIGGER_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "LTRIGGER");
      orxString_NPrint(acBuffer, sizeof(acBuffer), "%s", orxJoystick_GetAxisName((orxJOYSTICK_AXIS)(orxJOYSTICK_AXIS_RTRIGGER_1 + i * orxJOYSTICK_AXIS_SINGLE_NUMBER)));
      orxConfig_SetString(acBuffer, "RTRIGGER");
    }

    // Pop cheat input set section
    orxConfig_PopSection();

    // Orphan any previous cheats
    orxConfig_ClearSection(orxCHEAT_KZ_CONFIG_ROOT);

    // Push cheats section
    orxConfig_PushSection(orxCHEAT_KZ_CONFIG_SECTION);

    // For all cheats
    for(i = 0, u32CheatCount = orxConfig_GetKeyCount(); i < u32CheatCount; i++)
    {
      // Process it
      orxConfig_ForAllKeys(orxCheat_ProcessCheat, orxTRUE, orxNULL);
    }

    // Pop cheat section
    orxConfig_PopSection();

    // Register commands
    orxCOMMAND_REGISTER_CORE_COMMAND(Cheat, Enable, "Enabled?", orxCOMMAND_VAR_TYPE_BOOL, 0, 1, {"Enable = true", orxCOMMAND_VAR_TYPE_BOOL});

    // Update status
    sstCheat.bInit = orxTRUE;

    // Has cheats?
    if(u32CheatCount > 0)
    {
      // Enable cheats
      orxCheat_Enable(orxTRUE);
    }
  }

  // Done!
  return eResult;
}

void orxCheat_Exit()
{
  // Was initialized?
  if(sstCheat.bInit)
  {
    // Disable cheats
    orxCheat_Enable(orxFALSE);

    // Unregister commands
    orxCOMMAND_UNREGISTER_CORE_COMMAND(Cheat, Enable);

    // Update status
    sstCheat.bInit = orxFALSE;
  }

  // Done!
  return;
}

void orxFASTCALL orxCheat_Enable(orxBOOL _bEnable)
{
  // Is initialized?
  if(sstCheat.bInit)
  {
    // Enable?
    if(_bEnable)
    {
      // Not already enabled?
      if(!orxInput_IsSetEnabled(orxCHEAT_KZ_INPUT_SET))
      {
        orxBOOL bDebugLevel;

        // Deactivate input debug logs
        bDebugLevel = orxDEBUG_IS_LEVEL_ENABLED(orxDEBUG_LEVEL_INPUT);
        orxDEBUG_ENABLE_LEVEL(orxDEBUG_LEVEL_INPUT, orxFALSE);

        // Enable input set
        orxInput_EnableSet(orxCHEAT_KZ_INPUT_SET, orxTRUE);

        // Restore input debug logs
        orxDEBUG_ENABLE_LEVEL(orxDEBUG_LEVEL_INPUT, bDebugLevel);

        // Register update function
        orxClock_Register(orxClock_Get(orxCLOCK_KZ_CORE), orxCheat_Update, orxNULL, orxMODULE_ID_MAIN, orxCLOCK_PRIORITY_NORMAL);

        // Update status
        sstCheat.zCurrent = orxNULL;
      }
    }
    else
    {
      // Was enabled?
      if(orxInput_IsSetEnabled(orxCHEAT_KZ_INPUT_SET))
      {
        // Unregister update function
        orxClock_Unregister(orxClock_Get(orxCLOCK_KZ_CORE), orxCheat_Update);

        // Disable input set
        orxInput_EnableSet(orxCHEAT_KZ_INPUT_SET, orxFALSE);

        // Update status
        sstCheat.zCurrent = orxNULL;
      }
    }
  }

  // Done!
  return;
}

#endif // orxCHEAT_IMPL

#endif // _orxCHEAT_H_
