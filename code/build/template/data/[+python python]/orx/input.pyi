def push_set(name: str) -> None: ...
def pop_set() -> None: ...

class Set:
  """
  Context manager for pushing/popping input sets

  Use:
  ```python
  with Set("PlayerInput"):
    throttle = orx.input.get_value("Accelerator")
  # Input set will automatically be popped, even if an exception is raised
  ```
  """

  def __new__(cls, name: str) -> Set: ...

  def __enter__(self) -> None: ...

  def __exit__(self, *args: None) -> None: ...

def enable_set(name: str, enable: bool = True) -> None: ...
def is_set_enabled(name: str) -> bool: ...
def get_all() -> list[str]: ...
def is_active(name: str) -> bool: ...
def has_been_activated(name: str) -> bool: ...
def has_been_deactivated(name: str) -> bool: ...
def get_value(name: str) -> float: ...
def set_value(name: str, value: float, permanent: bool = False) -> None: ...
def reset_value(name: str) -> None: ...
