from guid import Guid
from vector import Vector

def set_parent(name: str, parent: str | None) -> None: ...
def get_parent(name: str) -> str | None: ...

def push_section(name: str) -> None: ...
def pop_section() -> None: ...

class Section:
  """
  Context manager for pushing/popping configuration sections

  Use:
  ```python
  with Section("Runtime"):
    orx.config.set_bool("IsInRuntimeSection", True)
  # Section will automatically be popped, even if an exception is raised
  ```
  """

  def __new__(cls, name: str) -> Section: ...

  def __enter__(self) -> None: ...

  def __exit__(self, *args: None) -> None: ...

def get_sections() -> list[str]: ...
def get_keys() -> list[str]: ...

def get_list_count(key: str) -> int: ...

def set_bool(key: str, value: bool) -> None: ...
def get_bool(key: str, index: int | None = None) -> bool: ...

def set_int(key: str, value: int) -> None: ...
def get_int(key: str, index: int | None = None) -> int: ...

def set_guid(key: str, value: Guid) -> None: ...
def get_guid(key: str, index: int | None = None) -> Guid: ...

def set_float(key: str, value: float) -> None: ...
def get_float(key: str, index: int | None = None) -> float: ...

def set_string(key: str, value: str) -> None: ...
def get_string(key: str, index: int | None = None) -> str: ...

def set_vector(key: str, value: Vector) -> None: ...
def get_vector(key: str, index: int | None = None) -> Vector: ...

def has_section(name: str) -> bool: ...
def has_value(key: str, check_spelling: bool = True) -> bool: ...

def clear_section(name: str) -> None: ...
def clear_value(key: str) -> None: ...
