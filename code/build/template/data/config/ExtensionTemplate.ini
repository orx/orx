; Orx settings template / UTF-8 unicode support

; Sections are defined using [ ]
; Example:
; [My section]

; Everything after a ';' is considered as comment

; Key/value pairs are written like this:
; MyKey = MyValue
; Warning! If you want to add comments, use the ';' separator
; Example:
; MyKey = MyValue; Everything I wrote now is part of comments and not of the value

; If you want to use a ';' in a non-numerical value, use a block assignation delimited with '"'
; Example:
; MyKey = "MyValuePart1 ; MyValuePart2"
; Blocks are also useful for assigning multi-line values
; Example:
; MyKey = "This value
; spans
; on multiple lines"

; If you double the first '"', the value won't be considered as a block but as a regular one. It'll still contain a '"' at the start of the string value;
; Example:
; MyKey = ""MyQuotedValue"
; The string <"MyQuotedValue">, including the quotes, will be stored as a value

; All sections can inherit from any other one using the inheritance marker '@'
; Example:
; [Template]
; MyKey1 = MyValue1;
; MyKey2 = MyValue2;
; [Object@Template] <= This section will contains all values defined in the section 'Template';

; A parent can be removed when overriding a section and using no name after '@'.
; The implicit default parent section can be forced to be ignored by using the specific '@@' syntax
; Example:
; [Object] <= This section doesn't use any explicit parent but will use the implicit default parent if defined (see SettingsTemplate.ini, section [Config])
; [Object@Template] <= This section now uses 'Template' as an explicit parent section;
; [Object@] <= This section now has removed any explicit parent but is still using the implicit default parent if defined (see SettingsTemplate.ini, section [Config]))
; [Object@@] <= This section now has removed any parent and will not use the implicit default parent section either

; All values can be locally inherited from another section using the inheritance marker '@', with the optional use of '.' if we want to specify another key
; Example:
; [Template]
; MyKey = MyValue;
; MyOtherKey = MyOtherValue;
; [Object]
; MyKey = @Template; <= The value for 'MyKey' will be inherited from the one in the section 'Template', with the same key. This inheritance can be chained;
; My2ndKey = @Template.MyKey; <= The value for 'My2ndKey' will be inherited from the section 'Template' using the key 'MyKey'. This inheritance can also be chained;
; MyLastKey = @.MyKey; <= The value for 'MyLastKey' will be inherited from the current section ('Object') using the key 'MyKey'. This inheritance can also be chained;
; NB: MyOtherKey isn't inherited at all in this case.

; All values can implicitly refer to their own section using the inheritance marker '@' by itself. Its value will be dynamic and carry any inheritance to always result in the name of the child section;
; Example:
; [Template]
; MyKey = @; <= The value for 'MyKey' will be 'Template', the name of this section
; MyOtherKey = @; <= Same here, the value for 'MyOtherKey' will also be the name of this section: 'Template'
; [Object@Template]
; MyNewKey = @; <= The value for 'MyNewKey' will be 'Object'
; MyKey = @Template; <= The value for 'MyKey' will be inherited from the section 'Template' using the same key and its value will be 'Object', ie. this section, not the parent one, 'Template'
; NB: MyOtherKey will use the section inheritance and its value will be 'Object', ie. this section, not the parent one, 'Template'

; In the case of the in-section/nameless inheritance (@.Key), the "nameless" section used will also be dynamic;
; [Parent]
; MyKey = MyValue
; MyOtherKey = @.MyKey
; [Child@Parent]
; MyKey = MyLastValue
; Querying Child.MyOtherKey will result in 'MyLastValue': Child.MyOtherKey -> Parent.MyOtherKey -> <nameless>.Mykey -> Child.MyKey -> MyLastValue

; When a newly defined section had some previous content, the default behavior is to extend/override what is already present.
; If we'd rather clean all previous content of that section instead of extending/overriding it, we can add a '!' in front of the section definition.
; Example:
; [FirstSection]
; Key1 = 1
; [SecondSection]
; Key2 = 2
; [FirstSection] ; <= Here we're keeping what is already in this section
; NewKey1 = 3
; ![SecondSection] ; <= Here all the previous content of this section gets wiped
; NewKey2 = 4
; 2 values are present in FirstSection (Key1 = 1 and NewKey1 = 3) whereas only one value is present in SecondSection (NewKey2 = 4)

; If you want to load another file, you need to write this on an empty line:
; @path/to/MyOtherFile@
; Loading will happen instantly in the parsing, which can override previously defined values
; Also, values defined in the "included" file can be overridden afterward
; Lastly, after loading an "included" file, parsing will continue in the same section as before
; Example:
; [MySection]
; Key1 = Var1;
; @IncludeFile@
; Key2 = Var2; <= this will be added to the 'MySection' section
; If you want to conditionally load another file, you can use a command as condition:
; @condition_command?IncludeFile@ ; <= IncludeFile will only be loaded if executing condition_command returns non empty/false
; You can also optionally load another file based on a system config variable:
; @sysvar?IncludeFile@ ; <= IncludeFile will only be loaded if sysvar is set (ie. if executing the command Config.GetSystem sysvar returns non empty/false)
; Example:
; @windows?IncludeFile@ ; <= IncludeFile will only be loaded when running on Windows
; @debug?IncludeFile@ ; <= IncludeFile will only be loaded when running in debug
; @get MySection MyVar?IncludeFile@ ; <= IncludeFile will only be loaded if MyVar is set in the section MySection and doesn't equal false

; FLOAT values are expressed with a '.' as decimal separator.
; INT values can be expressed using different prefixes (not case sensitive):
; - decimal without any prefix: 16
; - hexadecimal with prefix '0x': 0x10
; - octal with prefix '0': 020
; - binary with prefix '0b': 0b10000
; VECTOR values are expressed this way:
; MyVector = (1.0, 2.0, 3.0); NB: { } can be used in place of ( ). Components can be (x, y, z) most of the time, or (r, g, b)/(h, s, l)/(h, s, v) for color
; When the last component of a vector is not specified, 0 will be used for it.
; Example:
; MyOtherVector = (4, 5); This is equivalent to MyOtherVector = (4, 5, 0)

; Wherever numerical values are used (Ints, Floats and Vectors), a random generated value can be obtained using the separator ~.
; Example:
; Value1 = 0.5 ~ 1.0;
; Value2 = (0.0, 0.0, 0.0) ~ (1.0, 1.0, 1.0);
; Random values can be constrained to steps/increments using the syntax v1 ~step~ v2.
; Example:
; Value3 = 0 ~2~ 10; This will produce an even value between 0 and 10 (ie. step = 2).
; Note that if the value is retrieved as a float, the upper bound cannot be reached, however it can be reached for all integer types.

; When using vector values, one can set a component to 0 to get an unconstrained value for that component.
; Example:
; MyRandomVector = (1, 3, 5) ~(0, 0.1)~ (2, 4, 6); X will be unconstrained between 1 and 2 (step = 0), Y will be between 3 and 4 with a step of 0.1 and Z will be unconstrained between 5 and 6 (no Z component -> Z = 0).

; You can specify lists of values using the separator #.
; The default behavior will be to select randomly a value from a list *EXCEPT* if a list item index is provided in the code.
; For all properties defined in this template, values will be taken randomly if a list is provided for any field that doesn't explicitly accept one.
; Lists can contain random values.
; Example:
; Key1 = Var1 # Var2 # RandVar3 ~ RandVar4 # Var5;
; Lists can span multiple lines when using # at the end of the line (line ending comments are allowed).
; If you want to define an empty element at the end of a list, use ##
; Example:
; Key2 = Var1 # Var2 #
;        Var3 #; This list still continues on next line and this comment is valid.
;        Var4  ; This list is now complete and contains 4 elements.
; Key3 = Var1 # Var2 ##; This list will not span on the next line but will contain a 3rd (and last) empty element.

; You can also append items to properties using the assignment operator '+='. Append values to a property that doesn't exist is a valid behavior:
; in this case a regular value will be created, ie. the '+' is ignored.
; Example:
; Key1  = Item1 # Item2;
; Key1 += Item3;
; Key2 += NewItem1 # NewItem2;
; Key1 now contains 3 items: Item1, Item2 and Item3. Key2 only contains 2 items: NewItem1 and NewItem2.

; Commands can be used in order to get more dynamic contents, they'll be prefixed by `%`.
; A sequence of multiple commands can be expressed by separating them with `,`.
; There are two ways to define embedded commands:
; - Commands evaluated at load time, not tied to any specific property. These will be evaluated once, when the file is loaded. Example:
;   % > Get OtherSection BaseValue, + < 1, Set NewSection ValuePlusOne <
; - Commands that are lazily evaluated every time the value of a property is retrieved. Example:
;   Key = % MyOwnCommand 42
; In this second case, when more than a single command is defined, the property's value will be the result returned by the last one.
; Example:
; MyOtherKey = % log "Fetching dynamic content of MyOtherKey", * 21 2; Fetching MyOtherKey will return 42
; Lazy commands can also be embedded inside lists.
; Example:
; Key = 1 # % + 2 3 # 10; Fetching Key will return either 1, 5 or 10

[+bundle +mod +movie +remote +sndh

[Resource]]
[+bundle
Bundle                  = path/to/bundle; NB: Defines which storages to search when locating bundles. Defaults to local folder;
; NB: For any other groups, "bundle:" is used to locate resources embedded inside the executable. "bundle:name.obr" is used to locate resources inside the bundle named name.obr;]
[+bundle +mod +remote +sndh
Sound                   = [+bundle bundle: # bundle:[name].obr # ]path/to/sound[+mod +sndh  # path/to/music][+remote  # http://localhost/sound; NB: Only HTTP/1.1 is supported for remote storages;]]
[+movie
Movie                   = [+bundle bundle: # bundle:[name].obr # ]path/to/movie[+remote  # http://localhost/movie; NB: Only HTTP/1.1 is supported for remote storages;]]
[+bundle

[Bundle]
IncludeList             = Group1|Storage1|Resource1 # ... # GroupN|StorageN|ResourceN; NB: Priorities are (high to low): Resource > Resource Storage > Resource Group. If an entry is in both IncludeList & ExcludeList, it will be included;
ExcludeList             = Group1|Storage1|Resource1 # ... # GroupN|StorageN|ResourceN; NB: Priorities are (high to low): Resource > Resource Storage > Resource Group. If an entry is in both IncludeList & ExcludeList, it will be included;]
[+inspector

[Inspector]
MOUSE_MIDDLE            = Inspect; NB: Binds physical inputs to "Inspect", which the only recognized input by the Inspector. If no input is bound to it, the Inspector will be deactivated;
Shader                  = ShaderTemplate; NB: Used to override the default selection highlight shader;
WindowSize              = [Vector]; NB: Used to override the default window size;]
[+cheat

[Cheats]
CheatCodeOrPhrase       = [Command]; NB: Cheat codes/phrases are case insensitive and can only be entered using the keyboard;
:Input1:...:InputN:     = [Command]; NB: All joystick inputs are recognized, *without* their JOY_ prefix. The following keys are bound to the joystick inputs: arrow keys->directions, letters->face buttons, L/R->LBumper/RBumper, Enter->Start;]
[+inspector

[ObjectTemplate]
InspectorFields         = Section1.Name1 # ... # SectionN.NameN; NB: Defines additional config properties to monitor when inspecting this object;]
[+movie

[MovieTemplate]
Movie                   = path/to/movie.mpg; NB: Supports: MPEG1 Video with MP2 Audio;]
[+mod

[ModTemplate]
Mod                     = path/to/music.mod; NB: Supports: MOD (Protracker), XM (FastTracker 2) & S3M (Scream Tracker 3);]
[+sndh

[SndhTemplate]
Sndh                    = path/to/music.sndh # [Int]; NB: Supports: Atari SNDH. The second element is an optional track number. Defaults to 1;]
[+scroll

[ScrollObjectTemplate]
Input                   = ScrollObjectInputTemplate; NB: If defined, the input set will be pushed automatically before ScrollObject::Update is called. Also, OnInput triggers will be fired for every existing input;

[ScrollObjectInputTemplate]
OnInput:.Input1         = [CommandList]; NB: Will be fired on the first frame Input1 has been activated;
OnInput:Input1          = [CommandList]; NB: Will only be fired on the first frame Input1 has been activated if no instant event is defined for it (ie. .Input1). It will also be fired for all subsequent frames of Input1 remaining active;
OnInput:.-Input1        = [CommandList]; NB: Will be fired on the first frame Input1 has been deactivated;
OnInput:-Input1         = [CommandList]; NB: Will only be fired on the first frame Input1 has been deactivated if no instant event is defined for it (ie. .-Input1). It will also be fired for all subsequent frames of Input1 remaining inactive;]
