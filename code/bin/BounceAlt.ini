; Bounce demo override test file
; Should be used with orx v.1.8+

[Bounce]
BallLimit             = 500; Overriding ball limit
ShowCursor            = false
ShaderFrequencySpeed  = 0.25
ShaderAmplitudeSpeed  = 0.5
ShaderMaxFrequency    = 6
ShaderMaxAmplitude    = 0.1
ViewportList          = BounceViewport # CompositingViewport
DisplayTrail          = false
TrailTimer            = 0.05
TrailSpeed            = (-20, -50) ~ (20, -80)
Title                 = Bounce Demo!
RaySelfFlags          = ball
RayCheckMask          = ball # wall

[BallSpawner]
Object                = Ball # Text
Position              = (0, 0, 10); <= Created out-of-scope

[Input]
MOUSE_MIDDLE          = ToggleShader
KEY_LCTRL             = ToggleShader
KEY_RCTRL             = ToggleShader
KEY_LALT              = ToggleProfiler
KEY_RALT              = ToggleProfiler
MOUSE_RIGHT           = Pick
KEY_ENTER             = Pick
KEY_F1                = PreviousResolution
KEY_F2                = NextResolution
KEY_F3                = ToggleFullScreen
KEY_LSHIFT            = Record
KEY_RSHIFT            = Record
KEY_T                 = ToggleTrail
MOUSE_EXTRA_1         = ToggleTrail
MOUSE_EXTRA_2         = RayCast
KEY_SPACE             = RayCast

[Default]
KeepInCache           = true

[Display]
Smoothing             = true

[WallTrack]
0.5                   = Object.Create Wall1
1.0                   = Object.Create Wall2
1.5                   = Object.Create Wall3
2.0                   = Object.Create Wall4

[WallTemplate]
FXList                = WallFX
TriggerList           = PickTrigger

[PickTrigger]
Pick                  = Object.AddFX ^ Pick true

[BumpTrigger]
OnCollide             = Object.AddFX ^ Bump true

[Bump]
SlotList              = ColorFlash

[Pick]
SlotList              = SmallWobble

[ColorFlash]
Type                  = color
EndTime               = 0.2
Curve                 = triangle
EndValue              = red

[WallFX]
SlotList              = FadeIn

[FadeIn]
Type                  = alpha
EndTime               = 0.4
StartValue            = -1

[Scale]
Type                  = scale
EndTime               = 0.1
StartValue            = 0.01
EndValue              = 1

[Wobble]
Type                  = scale
EndTime               = 0.6
Period                = 0.2
Curve                 = sine
Amplification         = 0.5
StartValue            = 1
EndValue              = 2
Stagger               = true

[SmallWobble@Wobble]
EndValue              = 1.4

[VanishFX]
SlotList              = Vanish

[Vanish]
Type                  = alpha
EndTime               = 1
EndValue              = -1

[ObjectFX]
SlotList              = Scale # Wobble # FadeIn

[Ball]
LifeTime              = 9
Scale                 = 0.3 ~ 1
Alpha                 = 0.6 ~ 1
Color                 = black ~ cyan
FXList                = ObjectFX
; Applying a vanish FX and postponing object's deletion until the FX is over
OnDelete              = Object.AddFX ^ VanishFX, Object.SetLifeTime ^ fx, return false
TriggerList           = BumpTrigger # PickTrigger

[Text@Ball]
Scale                 = 1 ~ 1.4
Graphic               = TextGraphic

[BallText]
String                = ORX # lorem ipsum # Bounce ! # ball

[TextGraphic]
Text                  = BallText
Pivot                 = center

[Sphere]
Friction              = 0.6

[Walls]
Graphic               = @
Texture               = pixel
Alpha                 = 0
ChildList             = RayLabel
TrackList             = WallTrack

[Wall1]
Position              = (-300, -250)
Rotation              = -60
Scale                 = -0.5
; Moving the wall

[Wall2]
Position              = (300, -150)
Rotation              = 60
Scale                 = 0.5
; Moving the wall

[Wall3]
Position              = (-200, 50)
Rotation              = -60
Scale                 = -0.5
; Moving the wall

[ParticleGraphic]
Texture               = +.png # x.png
Pivot                 = center

[SpawnerGraphic]
Texture               = o.png
Pivot                 = center

[FadeOut]
Type                  = alpha
EndTime               = @Particle.LifeTime
Curve                 = smoother
EndValue              = -1

[ColorBlink]
Type                  = color
EndTime               = 2
Curve                 = sine
EndValue              = (-100, -100, -100)

[SpawnerWobble]
Type                  = scale
EndTime               = 2
Curve                 = sine
StartValue            = 1
EndValue              = 0.6

[Flip]
Type                  = scale
EndTime               = 4
Curve                 = sine
StartValue            = (1, 1, 1)
EndValue              = (1, -1, 1)

[SpawnerFX]
SlotList              = ColorBlink # SpawnerWobble
Loop                  = true

[ParticleFX]
SlotList              = Flip # FadeOut

[Particle]
LifeTime              = 2
Graphic               = ParticleGraphic
Color                 = purple ~ (150, 0, 150)
Alpha                 = 0.7 ~ 1
UseParentSpace        = position
Scale                 = 0.5 ~ 0.7
Position              = (-0.5, 0) ~ (0.5, 0.5)
Speed                 = (-50, 30) ~ (50, 100)
AngularVelocity       = -180 ~ 180
FXList                = ParticleFX

[ParticleSource]
Spawner               = Spawner
Graphic               = SpawnerGraphic
RGB                   = purple
Position              = (0, 0, -0.2)
FXList                = SpawnerFX

[Spawner]
Object                = Particle
WaveSize              = 1
WaveDelay             = 0.075

[RayLabel]
Graphic               = @
Text                  = @
String                =
ParentCamera          = BounceCamera
UseParentSpace        = false
Smoothing             = false
Pivot                 = top right
Position              = top right (-10, 10)
TrackList             = RayTrack

[RayTrack]
0                     = >> get Bounce RayHit      #
                        >  String.Compare < ""    #
                        >  if < "Ray hit: <" ""   #
                           Object.SetText ^ <
Loop                  = true

[BounceViewport]
BackgroundColor       = black
TextureList           = ViewportTexture

[CompositingViewport]
BackgroundColor       = black
ShaderList            = BounceShader

[BounceShader]
Code                  = "
void main()
{
  // Is shader ""enabled?""
  if(enabled != 0.0)
  {
    // Computes position with offset
    vec2 vPos = vec2((amplitude * sin(((frequency * gl_TexCoord[0].y) + phase) * 6.28)) + gl_TexCoord[0].x, gl_TexCoord[0].y);

    // Inside texture?
    if((vPos.x >= texture_left) && (vPos.x <= texture_right))
    {
      const vec3 vBW = vec3(0.2126, 0.7152, 0.0722);

      // Gets its pixel
      vec4 vPixel = texture2D(texture, vPos);

      // Gets its halfed-gray value
      vec2 vGray = vec2(0.5 * dot(vPixel.rgb, vBW.rgb), 0.5);

      // Outputs grayed offseted pixel on top of original one
      gl_FragColor = (vec4(color.rgb, 1.0) * vGray.xxxy) + vec4(0.5) * texture2D(texture, gl_TexCoord[0].xy);
    }
    else
    {
      // Outputs black pixel on top of original pixel
      gl_FragColor = vec4(0.0, 0.0, 0.0, 0.5) + vec4(0.5) * texture2D(texture, gl_TexCoord[0].xy);
    }
  }
  else
  {
    // Outputs original pixel
    gl_FragColor = texture2D(texture, gl_TexCoord[0].xy);
  }
}
"
UseCustomParam        = true
ParamList             = texture # frequency # phase # amplitude # color # enabled
texture               = ViewportTexture
frequency             = 4
phase                 = time
amplitude             = 0.1
color                 = @BounceShader.ColorList
enabled               = 0
ColorList             = (1, 0, 0) # (0, 1, 0) # (0, 0, 1) # (1, 1, 0) # (1, 0, 1) # (0, 1, 1) # (1, 1, 1)
